//最简单的当然就是逐一比对了，O(n)的时间复杂度，但那样做的话，就失去了这题的意义
//用二分查找法，但是需要改进一下   如4,5,6,7,8,9,0,1,2,3 target为1
//首先判断nums[mid]和target在不在同一区间里面，如果在，就使用正常的二分查找，否则进入下一个判断
//判断target是在第一个区间还是第二个区间，在第一个区间可把num赋为正无穷，以便继续在lo到mid内查找，否则在mid+1到hi内查找
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int lo=0,hi=nums.size();
        while(lo<hi){
            int mid=lo+(hi-lo)/2;
            double num=(nums[mid]<nums[0])==(target<nums[0])?nums[mid]:target<nums[0]?-INFINITY:INFINITY;  //核心代码，结合例子好好理解
            if(num<target)
                lo=mid+1;
            else if(num>target)
                hi=mid;
            else
                return mid;
        }
        return -1;
    }
};
