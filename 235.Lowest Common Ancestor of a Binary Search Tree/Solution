//如果不使用BST的特性，直接使用递归求解
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        if(root==q||root==p) return root;   //查找到p,q节点
        TreeNode* left=lowestCommonAncestor(root->left,p,q);    //递归查找左子树
        TreeNode* right=lowestCommonAncestor(root->right,p,q);  //递归查找右子树
        if(left&&right) return root;        //如果p,q节点分别在左右子树
        else if(left) return left;          //在同一子树
        else if(right) return right;
        else return NULL;
    }
};

//利用BST的特性，有root->left->val<root->val<root->right->val
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        if(p->val<root->val&&q->val<root->val)           //同属左子树
            return lowestCommonAncestor(root->left,p,q);
        else if(p->val>root->val&&q->val>root->val)
            return lowestCommonAncestor(root->right,p,q);   //同属右子树
        else 
            return root;       //分属左右子树，则当前节点为最小祖先
    }
};
