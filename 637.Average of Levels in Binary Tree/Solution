//这题很明显是层序遍历，有两种方法，分别是递归和迭代
//递归法，定义两个向量，分别统计每层的节点和和节点数，然后相除得到平均值
class Solution {
public:
    vector<double> res;
    vector<int> num;
    void levelSum(TreeNode* root,int level){
        if(!root) return;
        if(level==res.size()){        //到下一层了
            res.emplace_back(0);
            num.emplace_back(0);
        }
        res[level]+=root->val;
        ++num[level];
        levelSum(root->left,level+1);
        levelSum(root->right,level+1);
    }
    vector<double> averageOfLevels(TreeNode* root) {
        if(!root) return res;
        levelSum(root,0);
        for(int i=0;i<res.size();++i)
            res[i]/=num[i];
        return res;
    }
};

//迭代法，用队列做
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> res;
        if(!root) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int num=q.size();      //当前队列里的节点个数即为当前层的节点个数
            double sum=0;
            for(int i=0;i<num;++i){       //遍历当前层的所有节点并求和
                TreeNode* p=q.front();
                q.pop();
                sum+=p->val;
                if(p->left) q.push(p->left);
                if(p->right) q.push(p->right);
            }
            res.emplace_back(sum/num);     //求平均值
        }
        return res;
    }
};
