//先将时间间隔排序，然后分三种情况，重叠，包含，分离三种情况分别判断

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())
            return res;
        sort(intervals.begin(),intervals.end(),[](Interval a,Interval b){
            if(a.start<b.start)
                return true;
            else if(a.start==b.start)
                return a.end<b.end;
            else
                return false;
        });
        auto cur=intervals[0];
        for(int i=1;i<intervals.size();++i){
            if(cur.end>=intervals[i].start&&cur.end<intervals[i].end){            //如果重叠，合并，并让当前指向的间隔等于合并后的间隔
                Interval s(cur.start,intervals[i].end);
                cur=s;
            }
            else if(cur.start<=intervals[i].start&&cur.end>=intervals[i].end)  //被包含
                continue;
            else{
                res.push_back(cur);
                cur=intervals[i];
            }
        }
        res.push_back(cur);
        return res;
    }
};