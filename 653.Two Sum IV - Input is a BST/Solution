//最简单的就是中序遍历bst，将所有节点的值存储进一个向量中，然后对向量进行双向查找，看是否存在两个元素的值等于k
//能否用类似双向查找的方法对bst进行查找
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> tree;
    void inOrder(TreeNode* root){
        if(!root) return;
        inOrder(root->left);
        tree.emplace_back(root->val);
        inOrder(root->right);
    }
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;     //如果只有1个或0个节点，返回false
        if(!root->left&&!root->right) return false;
        inOrder(root);
        int i=0,j=tree.size()-1;
        while(i<j){               //双向查找
            if(tree[i]+tree[j]==k)
                return true;
            else if(tree[i]+tree[j]<k)
                ++i;
            else
                --j;
        }
        return false;
    }
};
