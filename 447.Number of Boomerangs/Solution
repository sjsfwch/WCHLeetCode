//本题的主要思路是，对于每一个点，算出所有除该点外的所有点到该点的距离，并存储到unordered_map里，然后遍历map，计算以该点为中心的boomerang数
//时间复杂度为O(n^2)
class Solution {
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        int count=0;
        for(int i=0;i<points.size();i++){
            unordered_map<int,int> table(points.size());
            for(int j=0;j<points.size();j++){   //计算除该点外的所有点到该的距离，距离相同，则value+1；
                if(i==j) continue;
                int dx=points[i].first-points[j].first;
                int dy=points[i].second-points[j].second;
                int dis=dx*dx+dy*dy;
                table[dis]++;
            }
            for(auto&p:table)
                count+=p.second*(p.second-1);   //通过数学推导
        }
        return count;
    }
};
