//采用两次二分查找
//第一次查找到第一个等于target的元素，第二次查找到第一个不等于target的元素
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return vector<int>{-1,-1};   //空向量
        int lo=0,hi=nums.size()-1;
        vector<int> res;
        while(lo<hi){
            int mid=lo+(hi-lo)/2;
            if(nums[mid]<target)    //查找到第一个等于target的元素
                lo=mid+1;
            else
                hi=mid;
        }
        if(nums[lo]!=target) return vector<int>{-1,-1};  //说明不存在
        res.emplace_back(lo);
        hi=nums.size()-1;    //lo可以不用变
        while(lo<hi){
            int mid=lo+(hi-lo)/2;     //第二次查找
            if(nums[mid]==target)     //找到第一个大于target的元素
                lo=mid+1;
            else if(nums[mid]>target)
                hi=mid;
        }
        hi=nums[hi]==target?hi:hi-1;   //还可能所有元素都等于target，需要判断一下
        res.emplace_back(hi);
        return res;
    }
};
