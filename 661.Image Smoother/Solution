//原理很简单，每一位的各个方向的数值加起来求平均值，但是有个问题，如果前面的数值改变了，后面的也就不对了，必须同时平衡
//由于色位是8位，因此可以用第8到15位存储平衡后的数值，整体计算完毕后，再移位即可
class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        int m=M.size(),n=M[0].size();
        if(m==0||n==0) return {{}};
        vector<vector<int>> dirs={{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{1,1},{-1,1},{1,-1}};  //8个方向
        for (int i=0;i<m;i++) {
            for (int j=0;j<n;j++) {
                int sum=M[i][j], cnt=1;
                for (int k=0; k<dirs.size();k++) {
                    int x=i+dirs[k][0],y=j+dirs[k][1];
                    if(x<0||x>m-1||y<0||y>n-1) continue;
                    sum+=(M[x][y]&0xFF);
                    ++cnt;
                }
                M[i][j]|=((sum/cnt)<<8);     //在8到15位存储
            }
        }
         for (int i=0;i<m;i++) {
            for (int j=0;j<n;j++) {
                M[i][j]>>=8;        //新数值移位下来
            }
         }
        return M;
    }
};
