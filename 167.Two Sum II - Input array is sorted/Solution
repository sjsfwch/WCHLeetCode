//第一种解法，用unordered_map做，与Two Sum解法一样
//如果解法一样，显然失去了这题的意义，注意到数组是递增的，因此可以从头尾同时搜索，直到两者之和等于target
//该解法时间复杂度为O(n)，空间复杂度为O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> result;
        int i=0,j=numbers.size()-1;
        while(i<j){
            if(numbers[i]+numbers[j]==target){
                result.push_back(i+1);
                result.push_back(j+1);
                return result;
            }
            else if(numbers[i]+numbers[j]<target)     //如果小于，说明值应增大，i向右移
                i++;
            else                                      //如果大于，说明值应减小，j向左移
                j--;
        }
        return result;
    }
};


//附上unordered_map解法代码
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> result;
        unordered_map<int,int> table;
        int i,j;
        for (i=0;i<numbers.size();i++){
            if(!table.count(numbers[i]))
                table.insert(pair<int,int>(numbers[i],i));
            if(table.count(target-numbers[i])){
                j=table[target-numbers[i]];
                if(j<i){
                result.push_back(j+1);
                result.push_back(i+1);
                return result;
                }
            }
        }
        return result;
    }
};
