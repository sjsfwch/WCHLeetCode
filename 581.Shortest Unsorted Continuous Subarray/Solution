//本题的主要难点在于可能存在重复的数字和分段有序，整体无序这种情况
//主要思想是，找出第一个失序元素，其下标为start，最后一个失序元素，下标记为end
//设置max为失序段中的最大值，以此判断是否有序无序
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums)
    {
        int start=-1,end=-1,max=INT_MIN;
        for(int i=0;i<nums.size();i++){
            if(max>nums[i]){
                if(start==-1)       //第一次失序，记录start
                    start=i-1;
                while(start-1>=0&&nums[start-1]>nums[i])    //由于可能存在重复元素，判断start之前是否存在失序元素
                    start--;
                end=i;                //更新end
            }
            else max=nums[i];        
        }
        return (end - start)==0?0:end-start+1;    //如果存在失序子数列，其长度应等于end-start+1
    }
};
