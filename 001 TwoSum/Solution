//我的解法，时间复杂度O(n^2)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int len=nums.size();
        vector<int> results;
        for(int i=0; i<len-1; i++){
            for(int j=i+1; j<len; j++){
                if(nums[i]+nums[j]==target){
                    results.push_back(i);
                    results.push_back(j);
                    return results;
                }
            }
        }
        
    }
};

/*学习其他大神的解法，考虑用unordered_map做，每次都判断当前数组索引位置的值在不在map里，不在的话，加入进去，key为数值，value为它的索引值
如果target-当前值在哈希表里，查找其value=j，并返回当前数组索引值i和*/

class Solution {  
public:  
    vector<int> twoSum(vector<int> &nums, int target) {  
        int i, sum;  
        vector<int> results;  
        unordered_map<int, int> nummap;  
        for(i=0; i<nums.size(); i++){  
            if(!nummap.count(nums[i])){  
                nummap.insert(pair<int, int>(nums[i], i));  
            }  
            if(nummap.count(target-nums[i])){  
                int j=nummap[target-nums[i]];  
                if(j<i){  
                    results.push_back(j);  
                    results.push_back(i);   
                    return results;  
                }  
            }  
        }  
        return results;  
    }  
};
