//思路跟之前一题差不多，但用了一个map来防止重复，很暴力的方法，可以换成set

//讨论区有人用DFS的思想做

class Solution {
public:
    vector<vector<int>> res;
    unordered_map<vector<int>, int> table;
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int LastSwapNum = nums[0];
        for (int i = 0; i < nums.size(); ++i) {
            if (i == 0 || nums[i] != LastSwapNum) {
                swap(nums[0], nums[i]);
                LastSwapNum = nums[i];
                permuteAsist(nums, 1);
                swap(nums[0], nums[i]);
            }
        }
        return res;
    }

    void permuteAsist(vector<int>& nums, int Idx) {
        if (Idx == nums.size()) {
            if (!table.count(nums))
                res.emplace_back(nums);
            table[nums]++;
        }
        int LastSwapNum = nums[Idx];
        for (int i = Idx; i < nums.size(); ++i) {
            if (i == Idx || nums[i] != LastSwapNum) {
                swap(nums[Idx], nums[i]);
                LastSwapNum = nums[i];
                permuteAsist(nums, Idx + 1);
                swap(nums[Idx], nums[i]);
            }
        }
    }
};
