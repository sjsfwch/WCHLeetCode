//双向遍历，由于j-i不断缩小，所以只需不断寻找高度大于当前高度的点并计算面积即可。
class Solution {
public:
    int maxArea(vector<int>& height) {
        int res=0,i=0,j=height.size()-1;
        while(i<j){
            int h=min(height[i],height[j]);   //容积由低的高度决定
            res=max(res,h*(j-i));
            while(height[i]<=h&&i<j) ++i;    //寻找下一个高度大于当前高度的左节点
            while(height[j]<=h&&i<j) --j;   //寻找下一个高度大于当前高度的右节点
        }
        return res;
    }
};
