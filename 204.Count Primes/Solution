//本题考查的是如何查找素数，使用Sieve of Eratosthenes
//算法的思想：由于一个合数总是可以分解成若干个质数的乘积，那么如果把质数（最初只知道2是质数）的倍数都去掉，那么剩下的就是质数了。
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> prime(n, true);
        prime[0] = false, prime[1] = false;
        for (int i = 0; i < sqrt(n); ++i) {
            if (prime[i]) {
                for (int j = i*i; j < n; j += i) {   //查询倍数并标记为合数
                    prime[j] = false;
                }    
            }    
        }
        return count(prime.begin(), prime.end(), true); //向量中true的个数即为所有素数的个数
    }
};
