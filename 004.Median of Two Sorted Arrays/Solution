//https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2481/Share-my-O(log(min(mn))-solution-with-explanation
//主要思想就是将两个数组分成两部分，各自的左边和右边个数相等，且左边的值总小于右边
//时间复杂度O(log(min(m,n)))
//需要注意奇数和偶数的不同情况
//
class Solution
{
public:
    double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2)
    {
        int m = nums1.size(), n = nums2.size();
        if (m > n)
            return findMedianSortedArrays(nums2, nums1);
        int iMin = 0, iMax = m, half = (m + n + 1) >> 1, i, j;//如果是奇数，分去左边
        while (iMin <= iMax)    //寻找符合条件的i j
        {
            i = (iMin + iMax) >> 1;
            j = half - i;
            if (i < m && nums2[j - 1] > nums1[i])   //说明i小了
                iMin = i + 1;
            else if (i > 0 && nums1[i - 1] > nums2[j])  //i大了
                iMax = i - 1;
            else
                break;    //找到
        }
        double num1, num2;
        if (i == 0)
            num1 = nums2[j - 1];
        else if (j == 0)
            num1 = nums1[i - 1];
        else
            num1 = nums1[i - 1] > nums2[j - 1] ? nums1[i - 1] : nums2[j - 1];
        if ((m + n) & 1)
            return num1;
        if (i == m)
            num2 = nums2[j];
        else if (j == n)
            num2 = nums1[i];
        else
            num2 = nums1[i] < nums2[j] ? nums1[i] : nums2[j];
        return (num1 + num2) / 2;
    }
};
